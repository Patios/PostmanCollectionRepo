{
	"info": {
		"_postman_id": "47048252-5dad1ad8-ffdf-4442-9128-d0d627fd74cb",
		"name": "PostmanEcho",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "PostmanEchoVIP",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bef5a235-96df-4dbf-b945-db47edd820dd",
						"exec": [
							"pm.test(\"Basic tests\",function(){",
							"",
							"const response = pm.response.json();",
							"// Test for status code",
							"pm.response.to.have.status(200);",
							"",
							"// Test for response time",
							"pm.expect(pm.response.responseTime).to.be.below(600);",
							"",
							"// Test for response content type",
							"pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"",
							"// Test for 'args' object existence and properties",
							"pm.expect(response.args).to.exist;",
							"pm.expect(response.args).to.have.all.keys('id', 'type');",
							"",
							"// Test for 'id' and 'type' properties",
							"pm.expect(response.args.id).to.be.a('string');",
							"pm.expect(response.args.type).to.be.a('string');",
							"",
							"// Test for 'headers' object existence",
							"pm.expect(response.headers).to.exist;",
							"",
							"// Test for 'url' field existence",
							"pm.expect(response).to.have.property('url').that.is.a('string');",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response has required fields in the 'headers' object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.headers).to.exist;",
							"    pm.expect(responseData.headers).to.include.keys('host', 'x-request-start', 'connection', 'x-forwarded-proto', 'x-forwarded-port', 'x-amzn-trace-id', 'user-agent', 'accept', 'cache-control', 'postman-token', 'accept-encoding', 'cookie');",
							"});",
							"",
							"",
							"pm.test(\"The 'id' and 'type' properties must be non-empty strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.args).to.have.all.keys('id', 'type');",
							"    ",
							"    ['id', 'type'].forEach(function(key) {",
							"        pm.expect(responseData.args[key]).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, `${key} should not be empty`);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response headers include 'Content-Length'\", function () {",
							"    pm.expect(pm.response.headers.has('Content-Length')).to.be.true;",
							"});",
							"",
							"",
							"pm.test(\"Validate the structure of the 'headers' object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.headers).to.exist.and.to.be.an('object');",
							"",
							"    const headers = responseData.headers;",
							"    const headerKeys = [\"host\", \"x-request-start\", \"connection\", \"x-forwarded-proto\", \"x-forwarded-port\", \"x-amzn-trace-id\", \"user-agent\", \"accept\", \"cache-control\", \"postman-token\", \"accept-encoding\", \"cookie\"];",
							"    ",
							"    headerKeys.forEach(function(key) {",
							"        pm.expect(headers).to.have.property(key);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range of 100ms to 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.above(100).and.to.be.below(600);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e868e882-b802-4f80-ac7e-606790d7a80f",
						"exec": [
							"console.info(\"run PostmanEchoVIP\")"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "47048252-be0993e5-58b0-48b2-bb94-234a102782d6",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://postman-echo.com/get?{{Id}}=123&type=VIP",
					"protocol": "{{protocol}}",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					],
					"query": [
						{
							"key": "{{Id}}",
							"value": "123"
						},
						{
							"key": "type",
							"value": "VIP"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Astros Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "afb35c2a-1055-47c8-a47c-997518807024",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.status).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.all.keys('people', 'number', 'message');",
							"});",
							"",
							"",
							"pm.test(\"Validate the schema of the 'people' array elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.people).to.be.an('array');",
							"    ",
							"    responseData.people.forEach(person => {",
							"        pm.expect(person).to.be.an('object');",
							"        pm.expect(person).to.have.all.keys('craft', 'name');",
							"        pm.expect(person.craft).to.be.a('string');",
							"        pm.expect(person.name).to.be.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Validate 'name' is a non-empty string and 'craft' can be a non-empty string or null\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.people).to.be.an('array');",
							"",
							"    responseData.people.forEach(person => {",
							"        pm.expect(person).to.be.an('object');",
							"        pm.expect(person.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"        pm.expect(person.craft).to.satisfy(craft => typeof craft === 'string' && craft.length > 0 || craft === null, \"Craft should be a non-empty string or null\");",
							"    });",
							"});",
							"var responseData = pm.response.json();",
							"",
							"// Test for the response status and structure",
							"pm.test(\"Response status code is 200 and body contains expected data\", function () {",
							"    pm.expect(pm.response.status).to.equal(200);",
							"    pm.expect(responseData).to.be.an('object').that.has.all.keys('people', 'number', 'message');",
							"});",
							"",
							"// Test response time",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"// Validate the schema of the 'people' array elements",
							"pm.test(\"Validate the schema of the 'people' array elements\", function () {",
							"    pm.expect(responseData.people).to.be.an('array');",
							"",
							"    responseData.people.forEach(person => {",
							"        pm.expect(person).to.be.an('object').that.has.all.keys('craft', 'name');",
							"        pm.expect(person.craft).to.be.a('string');",
							"        pm.expect(person.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"        pm.expect(person.craft).to.satisfy(craft => typeof craft === 'string' && craft.length > 0 || craft === null, \"Craft should be a non-empty string or null\");",
							"    });",
							"});",
							"var template = `",
							"<style type=\"text/css\">",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
							"    .tftable tr {background-color:#ffffff;}",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
							"    .tftable tr:hover {background-color:#e0ffff;}",
							"</style>",
							"",
							"<table class=\"tftable\" border=\"1\">",
							"    <tr>",
							"        <th>Name</th>",
							"        <th>Craft</th>",
							"    </tr>",
							"    ",
							"    {{#each response.people}}",
							"        <tr>",
							"            <td>{{name}}</td>",
							"            <td>{{craft}}</td>",
							"        </tr>",
							"    {{/each}}",
							"</table>",
							"`;",
							"",
							"function constructVisualizerPayload() {",
							"    return {response: pm.response.json()};",
							"}",
							"",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "47048252-c80bf763-981a-4dab-9c96-67c5c03de6d5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://api.open-notify.org/astros.json",
					"protocol": "http",
					"host": [
						"api",
						"open-notify",
						"org"
					],
					"path": [
						"astros.json"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "824ef686-11ac-4d4f-9f6a-d18698541dc3",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"console.info(\"Collection log\")"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "536d3e93-8d8e-4b97-8d15-89dce5397a21",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Id",
			"value": "id",
			"type": "default"
		}
	]
}